local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Create UI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "TeleportUnanchoredUI"
ScreenGui.Parent = game.CoreGui

local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 200, 0, 300)
MainFrame.Position = UDim2.new(0.8, 0, 0.5, -150)
MainFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 8)
UICorner.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Size = UDim2.new(1, 0, 0, 30)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "Teleport Unanchored"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 18
Title.Parent = MainFrame

local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = "ToggleButton"
ToggleButton.Size = UDim2.new(0.9, 0, 0, 30)
ToggleButton.Position = UDim2.new(0.05, 0, 0.15, 0)
ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
ToggleButton.Text = "OFF"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.TextSize = 14
ToggleButton.Parent = MainFrame

local UICorner2 = Instance.new("UICorner")
UICorner2.CornerRadius = UDim.new(0, 6)
UICorner2.Parent = ToggleButton

local ModeLabel = Instance.new("TextLabel")
ModeLabel.Name = "ModeLabel"
ModeLabel.Size = UDim2.new(0.9, 0, 0, 20)
ModeLabel.Position = UDim2.new(0.05, 0, 0.3, 0)
ModeLabel.BackgroundTransparency = 1
ModeLabel.Text = "Mode: Normal"
ModeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
ModeLabel.Font = Enum.Font.Gotham
ModeLabel.TextSize = 14
ModeLabel.Parent = MainFrame

local ModeButton = Instance.new("TextButton")
ModeButton.Name = "ModeButton"
ModeButton.Size = UDim2.new(0.9, 0, 0, 30)
ModeButton.Position = UDim2.new(0.05, 0, 0.4, 0)
ModeButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
ModeButton.Text = "Change Mode"
ModeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ModeButton.Font = Enum.Font.Gotham
ModeButton.TextSize = 14
ModeButton.Parent = MainFrame

local UICorner3 = Instance.new("UICorner")
UICorner3.CornerRadius = UDim.new(0, 6)
UICorner3.Parent = ModeButton

local SpeedLabel = Instance.new("TextLabel")
SpeedLabel.Name = "SpeedLabel"
SpeedLabel.Size = UDim2.new(0.9, 0, 0, 20)
SpeedLabel.Position = UDim2.new(0.05, 0, 0.6, 0)
SpeedLabel.BackgroundTransparency = 1
SpeedLabel.Text = "Speed: 0.5"
SpeedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
SpeedLabel.Font = Enum.Font.Gotham
SpeedLabel.TextSize = 14
SpeedLabel.Parent = MainFrame

local SpeedSlider = Instance.new("Frame")
SpeedSlider.Name = "SpeedSlider"
SpeedSlider.Size = UDim2.new(0.9, 0, 0, 20)
SpeedSlider.Position = UDim2.new(0.05, 0, 0.7, 0)
SpeedSlider.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
SpeedSlider.BorderSizePixel = 0
SpeedSlider.Parent = MainFrame

local UICorner4 = Instance.new("UICorner")
UICorner4.CornerRadius = UDim.new(0, 6)
UICorner4.Parent = SpeedSlider

local SliderFill = Instance.new("Frame")
SliderFill.Name = "SliderFill"
SliderFill.Size = UDim2.new(0.5, 0, 1, 0)
SliderFill.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
SliderFill.BorderSizePixel = 0
SliderFill.Parent = SpeedSlider

local UICorner5 = Instance.new("UICorner")
UICorner5.CornerRadius = UDim.new(0, 6)
UICorner5.Parent = SliderFill

local SliderButton = Instance.new("TextButton")
SliderButton.Name = "SliderButton"
SliderButton.Size = UDim2.new(1, 0, 1, 0)
SliderButton.BackgroundTransparency = 1
SliderButton.Text = ""
SliderButton.Parent = SpeedSlider

local DistanceLabel = Instance.new("TextLabel")
DistanceLabel.Name = "DistanceLabel"
DistanceLabel.Size = UDim2.new(0.9, 0, 0, 20)
DistanceLabel.Position = UDim2.new(0.05, 0, 0.8, 0)
DistanceLabel.BackgroundTransparency = 1
DistanceLabel.Text = "Distance: 10"
DistanceLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
DistanceLabel.Font = Enum.Font.Gotham
DistanceLabel.TextSize = 14
DistanceLabel.Parent = MainFrame

local DistanceSlider = Instance.new("Frame")
DistanceSlider.Name = "DistanceSlider"
DistanceSlider.Size = UDim2.new(0.9, 0, 0, 20)
DistanceSlider.Position = UDim2.new(0.05, 0, 0.9, 0)
DistanceSlider.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
DistanceSlider.BorderSizePixel = 0
DistanceSlider.Parent = MainFrame

local UICorner6 = Instance.new("UICorner")
UICorner6.CornerRadius = UDim.new(0, 6)
UICorner6.Parent = DistanceSlider

local DistanceFill = Instance.new("Frame")
DistanceFill.Name = "DistanceFill"
DistanceFill.Size = UDim2.new(0.5, 0, 1, 0)
DistanceFill.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
DistanceFill.BorderSizePixel = 0
DistanceFill.Parent = DistanceSlider

local UICorner7 = Instance.new("UICorner")
UICorner7.CornerRadius = UDim.new(0, 6)
UICorner7.Parent = DistanceFill

local DistanceButton = Instance.new("TextButton")
DistanceButton.Name = "DistanceButton"
DistanceButton.Size = UDim2.new(1, 0, 1, 0)
DistanceButton.BackgroundTransparency = 1
DistanceButton.Text = ""
DistanceButton.Parent = DistanceSlider

-- Variables
local isEnabled = false
local teleportSpeed = 0.5
local frozenParts = {}
local BodyPositions = {}
local BodyGyros = {}
local currentAngle = 0
local SpiralHeight = 0
local CurrentMode = "Normal"
local OrbitDistance = 10

local Modes = {
    "Normal",
    "Orbit",
    "Random",
    "Spiral",
    "Circle"
}

-- Functions
local function isPartValid(part)
    if part:IsDescendantOf(Players.LocalPlayer.Character) then
        return false
    end
    
    if part:IsA("Model") then
        for _, child in pairs(part:GetDescendants()) do
            if child:IsA("BasePart") and not child.Anchored then
                return true
            end
        end
        return false
    elseif not part:IsA("BasePart") and not part:IsA("UnionOperation") then
        return false
    end
    
    if part.Anchored then
        return false
    end
    
    local invalidNames = {
        "Torso", "Head", "Right Arm", "Left Arm", 
        "Right Leg", "Left Leg", "HumanoidRootPart",
        "UpperTorso", "LowerTorso", "LeftUpperArm", "RightUpperArm",
        "LeftLowerArm", "RightLowerArm", "LeftUpperLeg", "RightUpperLeg",
        "LeftLowerLeg", "RightLowerLeg", "LeftFoot", "RightFoot"
    }
    
    for _, name in ipairs(invalidNames) do
        if part.Name == name then
            return false
        end
    end
    
    return true
end

local function ClearConstraints()
    for _, constraint in pairs(BodyPositions) do
        if constraint and constraint.Parent then
            constraint:Destroy()
        end
    end
    for _, constraint in pairs(BodyGyros) do
        if constraint and constraint.Parent then
            constraint:Destroy()
        end
    end
    BodyPositions = {}
    BodyGyros = {}
    frozenParts = {}
end

local function ApplyConstraints()
    ClearConstraints()
    
    local character = Players.LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local rootPart = character.HumanoidRootPart
    
    for _, part in pairs(workspace:GetDescendants()) do
        if isPartValid(part) then
            if part:IsA("Model") then
                for _, child in pairs(part:GetDescendants()) do
                    if child:IsA("BasePart") and not child.Anchored and not child:IsDescendantOf(Players.LocalPlayer.Character) then
                        for _, constraint in pairs(child:GetChildren()) do
                            if constraint:IsA("BodyPosition") or constraint:IsA("BodyGyro") then
                                constraint:Destroy()
                            end
                        end
                        
                        local bodyPos = Instance.new("BodyPosition")
                        bodyPos.Parent = child
                        bodyPos.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                        bodyPos.Position = rootPart.Position
                        
                        local bodyGyro = Instance.new("BodyGyro")
                        bodyGyro.Parent = child
                        bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
                        bodyGyro.CFrame = CFrame.new(Vector3.new(0, 0, 0))
                        
                        table.insert(BodyPositions, bodyPos)
                        table.insert(BodyGyros, bodyGyro)
                        
                        if not table.find(frozenParts, child) then
                            table.insert(frozenParts, child)
                        end
                    end
                end
            else
                for _, constraint in pairs(part:GetChildren()) do
                    if constraint:IsA("BodyPosition") or constraint:IsA("BodyGyro") then
                        constraint:Destroy()
                    end
                end
                
                local bodyPos = Instance.new("BodyPosition")
                bodyPos.Parent = part
                bodyPos.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                bodyPos.Position = rootPart.Position
                
                local bodyGyro = Instance.new("BodyGyro")
                bodyGyro.Parent = part
                bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
                bodyGyro.CFrame = CFrame.new(Vector3.new(0, 0, 0))
                
                table.insert(BodyPositions, bodyPos)
                table.insert(BodyGyros, bodyGyro)
                
                if not table.find(frozenParts, part) then
                    table.insert(frozenParts, part)
                end
            end
        end
    end
end

local function UpdateConstraintPositions()
    local character = Players.LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local rootPart = character.HumanoidRootPart
    local basePosition = rootPart.Position
    local baseCFrame = rootPart.CFrame
    
    -- Calculate movement speed (completely separate from distance)
    local movementSpeed = 0.1 + (teleportSpeed * 0.9) -- Range from 0.1 to 1.0
    currentAngle = currentAngle + (math.pi / 30) * movementSpeed
    if currentAngle >= math.pi * 2 then
        currentAngle = currentAngle - math.pi * 2
    end
    
    -- Spiral height changes at a constant rate
    SpiralHeight = SpiralHeight + 0.1
    if SpiralHeight > 10 then
        SpiralHeight = -10
    end
    
    for i, bodyPos in pairs(BodyPositions) do
        if bodyPos and bodyPos.Parent and BodyGyros[i] and BodyGyros[i].Parent then
            local bodyGyro = BodyGyros[i]
            
            if CurrentMode == "Normal" then
                bodyPos.Position = basePosition
                bodyGyro.CFrame = CFrame.new(Vector3.new(0, 0, 0))
                
            elseif CurrentMode == "Orbit" then
                -- Use OrbitDistance directly without any speed influence
                local offset = Vector3.new(
                    math.cos(currentAngle + (i * 0.2)) * OrbitDistance,
                    0,
                    math.sin(currentAngle + (i * 0.2)) * OrbitDistance
                )
                bodyPos.Position = basePosition + offset
                bodyGyro.CFrame = CFrame.new(Vector3.new(0, 0, 0), offset)
                
            elseif CurrentMode == "Random" then
                -- Use OrbitDistance directly without any speed influence
                local randomOffset = Vector3.new(
                    (math.random() - 0.5) * OrbitDistance * 2,
                    (math.random() - 0.5) * OrbitDistance * 2,
                    (math.random() - 0.5) * OrbitDistance * 2
                )
                bodyPos.Position = basePosition + randomOffset
                bodyGyro.CFrame = CFrame.fromEulerAnglesXYZ(math.random() * math.pi * 2, math.random() * math.pi * 2, math.random() * math.pi * 2)
                
            elseif CurrentMode == "Circle" then
                -- Use OrbitDistance directly without any speed influence
                local partAngle = math.pi * 2 * (i % 20) / 20
                local offset = Vector3.new(
                    math.cos(partAngle) * OrbitDistance,
                    0,
                    math.sin(partAngle) * OrbitDistance
                )
                bodyPos.Position = basePosition + offset
                bodyGyro.CFrame = CFrame.new(Vector3.new(0, 0, 0), offset)
                
            elseif CurrentMode == "Spiral" then
                -- Use OrbitDistance directly without any speed influence
                local partIndex = i % 30
                local spiralAngle = partIndex * (math.pi / 15) + currentAngle
                local spiralRadius = OrbitDistance * (1 - (partIndex / 30))
                local heightOffset = -5 + ((partIndex / 30) * 10) + SpiralHeight
                
                local offset = Vector3.new(
                    math.cos(spiralAngle) * spiralRadius,
                    heightOffset,
                    math.sin(spiralAngle) * spiralRadius
                )
                bodyPos.Position = basePosition + offset
                bodyGyro.CFrame = CFrame.new(Vector3.new(0, 0, 0), offset)
            end
        end
    end
end

-- UI Interactions
ToggleButton.MouseButton1Click:Connect(function()
    isEnabled = not isEnabled
    ToggleButton.BackgroundColor3 = isEnabled and Color3.fromRGB(50, 255, 50) or Color3.fromRGB(255, 50, 50)
    ToggleButton.Text = isEnabled and "ON" or "OFF"
    if isEnabled then
        ApplyConstraints()
    else
        ClearConstraints()
    end
end)

ModeButton.MouseButton1Click:Connect(function()
    local currentIndex = table.find(Modes, CurrentMode) or 1
    currentIndex = currentIndex % #Modes + 1
    CurrentMode = Modes[currentIndex]
    ModeLabel.Text = "Mode: " .. CurrentMode
end)

SliderButton.MouseButton1Down:Connect(function()
    local mouse = Players.LocalPlayer:GetMouse()
    local sliderWidth = SpeedSlider.AbsoluteSize.X
    local mouseX = mouse.X - SpeedSlider.AbsolutePosition.X
    
    local newValue = math.clamp(mouseX / sliderWidth, 0.01, 1)
    teleportSpeed = newValue
    SliderFill.Size = UDim2.new(newValue, 0, 1, 0)
    SpeedLabel.Text = "Speed: " .. string.format("%.2f", teleportSpeed)
end)

DistanceButton.MouseButton1Down:Connect(function()
    local mouse = Players.LocalPlayer:GetMouse()
    local sliderWidth = DistanceSlider.AbsoluteSize.X
    local mouseX = mouse.X - DistanceSlider.AbsolutePosition.X
    
    local newValue = math.clamp(mouseX / sliderWidth, 0.01, 1)
    OrbitDistance = newValue * 200 -- Range from 2 to 200
    if OrbitDistance < 2 then OrbitDistance = 2 end
    DistanceFill.Size = UDim2.new(newValue, 0, 1, 0)
    DistanceLabel.Text = "Distance: " .. string.format("%.1f", OrbitDistance)
end)

-- Make UI draggable
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
    local delta = input.Position - dragStart
    MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
    end
end)

MainFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

MainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Main loop
RunService.Heartbeat:Connect(function()
    if isEnabled then
        UpdateConstraintPositions()
    end
end) 
